
Braille.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003f2  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000486  2**0
                  ALLOC
  3 .stab         000007a4  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e8  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084f  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002fc  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ad  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000235  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006db  00000000  00000000  00002199  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  14:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  34:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  3c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  48:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  4c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  50:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  54:	88 01       	movw	r16, r16
  56:	78 01       	movw	r14, r16
  58:	8a 01       	movw	r16, r20
  5a:	a4 01       	movw	r20, r8
  5c:	78 01       	movw	r14, r16
  5e:	78 01       	movw	r14, r16
  60:	78 01       	movw	r14, r16
  62:	78 01       	movw	r14, r16
  64:	9c 01       	movw	r18, r24
  66:	78 01       	movw	r14, r16
  68:	9e 01       	movw	r18, r28
  6a:	78 01       	movw	r14, r16
  6c:	ac 01       	movw	r20, r24
  6e:	78 01       	movw	r14, r16
  70:	80 01       	movw	r16, r0
  72:	78 01       	movw	r14, r16
  74:	7c 01       	movw	r14, r24
  76:	78 01       	movw	r14, r16
  78:	7e 01       	movw	r14, r28
  7a:	78 01       	movw	r14, r16
  7c:	8c 01       	movw	r16, r24
  7e:	a0 01       	movw	r20, r0
  80:	94 01       	movw	r18, r8
  82:	aa 01       	movw	r20, r20
  84:	90 01       	movw	r18, r0
  86:	a6 01       	movw	r20, r12
  88:	92 01       	movw	r18, r4
  8a:	a8 01       	movw	r20, r16
  8c:	7a 01       	movw	r14, r20
  8e:	78 01       	movw	r14, r16
  90:	86 01       	movw	r16, r12
  92:	78 01       	movw	r14, r16
  94:	82 01       	movw	r16, r4
  96:	78 01       	movw	r14, r16
  98:	84 01       	movw	r16, r8
  9a:	78 01       	movw	r14, r16
  9c:	8e 01       	movw	r16, r28
  9e:	a2 01       	movw	r20, r4
  a0:	9a 01       	movw	r18, r20
  a2:	78 01       	movw	r14, r16
  a4:	96 01       	movw	r18, r12
  a6:	78 01       	movw	r14, r16
  a8:	98 01       	movw	r18, r16

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf e5       	ldi	r28, 0x5F	; 95
  b0:	d8 e0       	ldi	r29, 0x08	; 8
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	a0 e6       	ldi	r26, 0x60	; 96
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e2 ef       	ldi	r30, 0xF2	; 242
  be:	f3 e0       	ldi	r31, 0x03	; 3
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
  c2:	05 90       	lpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a0 36       	cpi	r26, 0x60	; 96
  c8:	b1 07       	cpc	r27, r17
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	a0 e6       	ldi	r26, 0x60	; 96
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
  d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
  d6:	a2 36       	cpi	r26, 0x62	; 98
  d8:	b1 07       	cpc	r27, r17
  da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
  dc:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  e0:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_exit>

000000e4 <__bad_interrupt>:
  e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e8 <IO_init>:
	//Output Init	
	
	//Input Init
	
	//Configure PortD as Input Port
	DDRD = 0x00;
  e8:	11 ba       	out	0x11, r1	; 17
	//Configure PortD Pin0 as Input Pin
	ClearBit(DDRC,0);
  ea:	a0 98       	cbi	0x14, 0	; 20
	ClearBit(DDRC,1);
  ec:	a1 98       	cbi	0x14, 1	; 20
	ClearBit(DDRC,2);
  ee:	a2 98       	cbi	0x14, 2	; 20
	
	//init PortC Pin0 and PortD as Pull up Input Pin
	//SetBit(PORTC,0) ;
	SetBit(PORTC,0);
  f0:	a8 9a       	sbi	0x15, 0	; 21
	SetBit(PORTC,1);
  f2:	a9 9a       	sbi	0x15, 1	; 21
	SetBit(PORTC,2);
  f4:	aa 9a       	sbi	0x15, 2	; 21
	PORTD = 0xFF ;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	82 bb       	out	0x12, r24	; 18
}
  fa:	08 95       	ret

000000fc <main>:
int main(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	cc 52       	subi	r28, 0x2C	; 44
 106:	d1 40       	sbci	r29, 0x01	; 1
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
	IO_init();
 112:	0e 94 74 00 	call	0xe8	; 0xe8 <IO_init>
	LCD_INIT();
 116:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_INIT>
	
    while(1)
    {
		int Brailleword[100],count;
		char Englishword[100]="";
 11a:	0f 2e       	mov	r0, r31
 11c:	f0 e6       	ldi	r31, 0x60	; 96
 11e:	ff 2e       	mov	r15, r31
 120:	f0 2d       	mov	r31, r0
 122:	8e 01       	movw	r16, r28
 124:	0b 5f       	subi	r16, 0xFB	; 251
 126:	1f 4f       	sbci	r17, 0xFF	; 255
 128:	19 82       	std	Y+1, r1	; 0x01
 12a:	1a 82       	std	Y+2, r1	; 0x02
 12c:	1b 82       	std	Y+3, r1	; 0x03
 12e:	1c 82       	std	Y+4, r1	; 0x04
 130:	f8 01       	movw	r30, r16
 132:	8f 2d       	mov	r24, r15
 134:	11 92       	st	Z+, r1
 136:	8a 95       	dec	r24
 138:	e9 f7       	brne	.-6      	; 0x134 <main+0x38>
		/*
		int Brailleword[100]={28,32,56,32,50},count=5;
		char Englishword[100]="";
		*/
		count = Braile_Input(Brailleword);
 13a:	ce 01       	movw	r24, r28
 13c:	8b 59       	subi	r24, 0x9B	; 155
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	0e 94 55 01 	call	0x2aa	; 0x2aa <Braile_Input>
 144:	48 2f       	mov	r20, r24
		Word_Converter(Brailleword,Englishword,count);
 146:	ce 01       	movw	r24, r28
 148:	8b 59       	subi	r24, 0x9B	; 155
 14a:	9f 4f       	sbci	r25, 0xFF	; 255
 14c:	be 01       	movw	r22, r28
 14e:	6f 5f       	subi	r22, 0xFF	; 255
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 ae 01 	call	0x35c	; 0x35c <Word_Converter>
		word_printer(Englishword);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <word_printer>
		while(ReadBit(PINC,2) == 1);
 160:	83 b3       	in	r24, 0x13	; 19
 162:	82 fd       	sbrc	r24, 2
 164:	fd cf       	rjmp	.-6      	; 0x160 <main+0x64>
		LCD_clear_screen();
 166:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_clear_screen>
    }
 16a:	de cf       	rjmp	.-68     	; 0x128 <main+0x2c>

0000016c <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
 16c:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	83 ed       	ldi	r24, 0xD3	; 211
 170:	90 e3       	ldi	r25, 0x30	; 48
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_lcd_kick+0x6>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_lcd_kick+0xc>
 178:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
 17a:	c3 98       	cbi	0x18, 3	; 24
}
 17c:	08 95       	ret

0000017e <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
 17e:	8a b3       	in	r24, 0x1a	; 26
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
 184:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
 186:	c1 98       	cbi	0x18, 1	; 24
	LCD_lcd_kick();
 188:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
 18c:	8a b3       	in	r24, 0x1a	; 26
 18e:	80 6f       	ori	r24, 0xF0	; 240
 190:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
 192:	c2 98       	cbi	0x18, 2	; 24
	
}
 194:	08 95       	ret

00000196 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 19a:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_check_lcd_isbusy>
		LCD_PORT = command;
 19e:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
 1a0:	88 b3       	in	r24, 0x18	; 24
 1a2:	89 7f       	andi	r24, 0xF9	; 249
 1a4:	88 bb       	out	0x18, r24	; 24
 1a6:	89 ef       	ldi	r24, 0xF9	; 249
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_WRITE_COMMAND+0x14>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_WRITE_COMMAND+0x1a>
 1b0:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
 1b2:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	39 f4       	brne	.+14     	; 0x1cc <LCD_GOTO_XY+0x12>
	{
		if (position < 16 && position >= 0)
 1be:	60 31       	cpi	r22, 0x10	; 16
 1c0:	68 f4       	brcc	.+26     	; 0x1dc <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 1c2:	86 2f       	mov	r24, r22
 1c4:	80 58       	subi	r24, 0x80	; 128
 1c6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WRITE_COMMAND>
 1ca:	08 95       	ret
		}
	}
	if (line == 2)
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	31 f4       	brne	.+12     	; 0x1dc <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
 1d0:	60 31       	cpi	r22, 0x10	; 16
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 1d4:	86 2f       	mov	r24, r22
 1d6:	80 54       	subi	r24, 0x40	; 64
 1d8:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WRITE_COMMAND>
 1dc:	08 95       	ret

000001de <LCD_clear_screen>:

#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WRITE_COMMAND>
}
 1e4:	08 95       	ret

000001e6 <LCD_INIT>:
 1e6:	87 e8       	ldi	r24, 0x87	; 135
 1e8:	93 e1       	ldi	r25, 0x13	; 19
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_INIT+0x4>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_INIT+0xa>
 1f0:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 1f2:	87 b3       	in	r24, 0x17	; 23
 1f4:	8e 60       	ori	r24, 0x0E	; 14
 1f6:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 1f8:	88 b3       	in	r24, 0x18	; 24
 1fa:	81 7f       	andi	r24, 0xF1	; 241
 1fc:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8a bb       	out	0x1a, r24	; 26
 202:	85 ea       	ldi	r24, 0xA5	; 165
 204:	9e e0       	ldi	r25, 0x0E	; 14
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_INIT+0x20>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_INIT+0x26>
 20c:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 20e:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 212:	88 e3       	ldi	r24, 0x38	; 56
 214:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 224:	8f e0       	ldi	r24, 0x0F	; 15
 226:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WRITE_COMMAND>
}
 22a:	08 95       	ret

0000022c <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 22c:	cf 93       	push	r28
 22e:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 230:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_check_lcd_isbusy>
		LCD_PORT = character;
 234:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 236:	c2 98       	cbi	0x18, 2	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 238:	c1 9a       	sbi	0x18, 1	; 24
 23a:	89 ef       	ldi	r24, 0xF9	; 249
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_WRITE_CHAR+0x12>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_WRITE_CHAR+0x18>
 244:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
 246:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
	int count = 0;
 25a:	08 2f       	mov	r16, r24
 25c:	19 2f       	mov	r17, r25
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if (count == 32)
		{
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
 262:	ee 24       	eor	r14, r14
 264:	ff 24       	eor	r15, r15
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 266:	15 c0       	rjmp	.+42     	; 0x292 <LCD_WRITE_STRING+0x44>
		count++;
 268:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 26a:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_WRITE_CHAR>
		if (count == 16)
 26e:	c0 31       	cpi	r28, 0x10	; 16
 270:	d1 05       	cpc	r29, r1
 272:	29 f4       	brne	.+10     	; 0x27e <LCD_WRITE_STRING+0x30>
		{
			LCD_GOTO_XY(2,0);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_GOTO_XY>
 27c:	0a c0       	rjmp	.+20     	; 0x292 <LCD_WRITE_STRING+0x44>
		}
		else if (count == 32)
 27e:	c0 32       	cpi	r28, 0x20	; 32
 280:	d1 05       	cpc	r29, r1
 282:	39 f4       	brne	.+14     	; 0x292 <LCD_WRITE_STRING+0x44>
		{
			LCD_clear_screen();
 284:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_GOTO_XY>
			count = 0;
 290:	e7 01       	movw	r28, r14
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 292:	f8 01       	movw	r30, r16
 294:	81 91       	ld	r24, Z+
 296:	8f 01       	movw	r16, r30
 298:	88 23       	and	r24, r24
 29a:	31 f7       	brne	.-52     	; 0x268 <LCD_WRITE_STRING+0x1a>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	08 95       	ret

000002aa <Braile_Input>:


char Braile_Input(int word[])
{
	int inputVal,i=0,count=0;
	while(ReadBit(PINC,1) == 1)
 2aa:	e8 2f       	mov	r30, r24
 2ac:	f9 2f       	mov	r31, r25
#include "Letters.h"


char Braile_Input(int word[])
{
	int inputVal,i=0,count=0;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
	while(ReadBit(PINC,1) == 1)
 2b2:	0d c0       	rjmp	.+26     	; 0x2ce <Braile_Input+0x24>
	{
		if(ReadBit(PINC,0) == 0)
 2b4:	98 99       	sbic	0x13, 0	; 19
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <Braile_Input+0x24>
		{
			inputVal = ((~(PIND & 0xFF )) & 0b00111111 );
 2b8:	20 b3       	in	r18, 0x10	; 16
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	20 95       	com	r18
 2be:	30 95       	com	r19
 2c0:	2f 73       	andi	r18, 0x3F	; 63
 2c2:	30 70       	andi	r19, 0x00	; 0
			word[i] = inputVal ;
 2c4:	21 93       	st	Z+, r18
 2c6:	31 93       	st	Z+, r19
			i++ ;
 2c8:	01 96       	adiw	r24, 0x01	; 1
			count++;
			while(ReadBit(PINC,0) == 0);
 2ca:	98 9b       	sbis	0x13, 0	; 19
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <Braile_Input+0x20>


char Braile_Input(int word[])
{
	int inputVal,i=0,count=0;
	while(ReadBit(PINC,1) == 1)
 2ce:	23 b3       	in	r18, 0x13	; 19
 2d0:	21 fd       	sbrc	r18, 1
 2d2:	f0 cf       	rjmp	.-32     	; 0x2b4 <Braile_Input+0xa>
			count++;
			while(ReadBit(PINC,0) == 0);
		}
	}
	return count ;
}
 2d4:	08 95       	ret

000002d6 <Braile_Interpreter>:

char Braile_Interpreter (int decVal)
{
	char letter ;
	switch (decVal) {
 2d6:	fc 01       	movw	r30, r24
 2d8:	74 97       	sbiw	r30, 0x14	; 20
 2da:	eb 32       	cpi	r30, 0x2B	; 43
 2dc:	f1 05       	cpc	r31, r1
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <Braile_Interpreter+0x1a>
 2e0:	e6 5d       	subi	r30, 0xD6	; 214
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	05 90       	lpm	r0, Z+
 2ea:	f4 91       	lpm	r31, Z
 2ec:	e0 2d       	mov	r30, r0
 2ee:	09 94       	ijmp
	case 0 :
		letter = ' ';
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	08 95       	ret
		break;
	case 32 :
		letter = 'a';
		break;
	case 48 :
		letter = 'b';
 2f4:	82 e6       	ldi	r24, 0x62	; 98
		break;
 2f6:	08 95       	ret
	case 36 :
		letter = 'c';
 2f8:	83 e6       	ldi	r24, 0x63	; 99
		break;
 2fa:	08 95       	ret
	case 38 :
		letter = 'd';
 2fc:	84 e6       	ldi	r24, 0x64	; 100
		break;
 2fe:	08 95       	ret
	case 34 :
		letter = 'e';
 300:	85 e6       	ldi	r24, 0x65	; 101
		break;
 302:	08 95       	ret
	case 52 :
		letter = 'f';
 304:	86 e6       	ldi	r24, 0x66	; 102
		break;
 306:	08 95       	ret
	case 54 :
		letter = 'g';
 308:	87 e6       	ldi	r24, 0x67	; 103
		break;
 30a:	08 95       	ret
	case 50 :
		letter = 'h';
 30c:	88 e6       	ldi	r24, 0x68	; 104
		break;
 30e:	08 95       	ret
	case 20 :
		letter = 'i';
 310:	89 e6       	ldi	r24, 0x69	; 105
		break;
 312:	08 95       	ret
	case 22 :
		letter = 'j';
 314:	8a e6       	ldi	r24, 0x6A	; 106
		break;
 316:	08 95       	ret
	case 40 :
		letter = 'k';
 318:	8b e6       	ldi	r24, 0x6B	; 107
		break;
 31a:	08 95       	ret
	case 56 :
		letter = 'l';
 31c:	8c e6       	ldi	r24, 0x6C	; 108
		break;
 31e:	08 95       	ret
	case 44 :
		letter = 'm';
 320:	8d e6       	ldi	r24, 0x6D	; 109
		break;
 322:	08 95       	ret
	case 46 :
		letter = 'n';
 324:	8e e6       	ldi	r24, 0x6E	; 110
		break;
 326:	08 95       	ret
	case 42 :
		letter = 'o';
 328:	8f e6       	ldi	r24, 0x6F	; 111
		break;
 32a:	08 95       	ret
	case 60 :
		letter = 'p';
 32c:	80 e7       	ldi	r24, 0x70	; 112
		break;
 32e:	08 95       	ret
	case 62 :
		letter = 'q';
 330:	81 e7       	ldi	r24, 0x71	; 113
		break;
 332:	08 95       	ret
	case 58 :
		letter = 'r';
 334:	82 e7       	ldi	r24, 0x72	; 114
		break;
 336:	08 95       	ret
	case 28 :
		letter = 's';
 338:	83 e7       	ldi	r24, 0x73	; 115
		break;
 33a:	08 95       	ret
	case 30 :
		letter = 't';
 33c:	84 e7       	ldi	r24, 0x74	; 116
		break;
 33e:	08 95       	ret
	case 41 :
		letter = 'u';
 340:	85 e7       	ldi	r24, 0x75	; 117
		break;
 342:	08 95       	ret
	case 57 :
		letter = 'v';
 344:	86 e7       	ldi	r24, 0x76	; 118
		break;
 346:	08 95       	ret
	case 23 :
		letter = 'w';
 348:	87 e7       	ldi	r24, 0x77	; 119
		break;
 34a:	08 95       	ret
	case 45 :
		letter = 'x';
 34c:	88 e7       	ldi	r24, 0x78	; 120
		break;
 34e:	08 95       	ret
	case 47 :
		letter = 'y';
 350:	89 e7       	ldi	r24, 0x79	; 121
		break;
 352:	08 95       	ret
	case 43 :
		letter = 'z';
 354:	8a e7       	ldi	r24, 0x7A	; 122
		break ;
 356:	08 95       	ret
	switch (decVal) {
	case 0 :
		letter = ' ';
		break;
	case 32 :
		letter = 'a';
 358:	81 e6       	ldi	r24, 0x61	; 97
		break ;
	default :
		letter = ' ' ;
	}
	return letter ;
}
 35a:	08 95       	ret

0000035c <Word_Converter>:

void Word_Converter(int Bword[],char Eword[],int count)
{
 35c:	af 92       	push	r10
 35e:	bf 92       	push	r11
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	0f 92       	push	r0
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	5b 01       	movw	r10, r22
 378:	6a 01       	movw	r12, r20
	int i ;
	char let ;
	for(i=0; i<count; i++)
 37a:	14 16       	cp	r1, r20
 37c:	15 06       	cpc	r1, r21
 37e:	c4 f4       	brge	.+48     	; 0x3b0 <Word_Converter+0x54>
 380:	e8 2e       	mov	r14, r24
 382:	f9 2e       	mov	r15, r25
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	10 e0       	ldi	r17, 0x00	; 0
	{
		let = Braile_Interpreter(Bword[i]);
 388:	f7 01       	movw	r30, r14
 38a:	81 91       	ld	r24, Z+
 38c:	91 91       	ld	r25, Z+
 38e:	7f 01       	movw	r14, r30
 390:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Braile_Interpreter>
 394:	89 83       	std	Y+1, r24	; 0x01
		strncat(Eword, &let, 1);
 396:	c5 01       	movw	r24, r10
 398:	be 01       	movw	r22, r28
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <strncat>

void Word_Converter(int Bword[],char Eword[],int count)
{
	int i ;
	char let ;
	for(i=0; i<count; i++)
 3a6:	0f 5f       	subi	r16, 0xFF	; 255
 3a8:	1f 4f       	sbci	r17, 0xFF	; 255
 3aa:	0c 15       	cp	r16, r12
 3ac:	1d 05       	cpc	r17, r13
 3ae:	61 f7       	brne	.-40     	; 0x388 <Word_Converter+0x2c>
	{
		let = Braile_Interpreter(Bword[i]);
		strncat(Eword, &let, 1);
	}
}
 3b0:	0f 90       	pop	r0
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	cf 90       	pop	r12
 3c2:	bf 90       	pop	r11
 3c4:	af 90       	pop	r10
 3c6:	08 95       	ret

000003c8 <word_printer>:
void word_printer(char Eword[])
{
	
	LCD_WRITE_STRING(Eword);
 3c8:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_WRITE_STRING>
}
 3cc:	08 95       	ret

000003ce <strncat>:
 3ce:	fb 01       	movw	r30, r22
 3d0:	dc 01       	movw	r26, r24
 3d2:	0d 90       	ld	r0, X+
 3d4:	00 20       	and	r0, r0
 3d6:	e9 f7       	brne	.-6      	; 0x3d2 <strncat+0x4>
 3d8:	11 97       	sbiw	r26, 0x01	; 1
 3da:	41 50       	subi	r20, 0x01	; 1
 3dc:	50 40       	sbci	r21, 0x00	; 0
 3de:	28 f0       	brcs	.+10     	; 0x3ea <strncat+0x1c>
 3e0:	01 90       	ld	r0, Z+
 3e2:	00 20       	and	r0, r0
 3e4:	0d 92       	st	X+, r0
 3e6:	c9 f7       	brne	.-14     	; 0x3da <strncat+0xc>
 3e8:	08 95       	ret
 3ea:	1c 92       	st	X, r1
 3ec:	08 95       	ret

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>
